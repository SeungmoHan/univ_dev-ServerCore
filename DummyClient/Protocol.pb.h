// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class CS_ENTER_GAME;
struct CS_ENTER_GAMEDefaultTypeInternal;
extern CS_ENTER_GAMEDefaultTypeInternal _CS_ENTER_GAME_default_instance_;
class CS_LOGIN;
struct CS_LOGINDefaultTypeInternal;
extern CS_LOGINDefaultTypeInternal _CS_LOGIN_default_instance_;
class CS_NORMAL_CHAT;
struct CS_NORMAL_CHATDefaultTypeInternal;
extern CS_NORMAL_CHATDefaultTypeInternal _CS_NORMAL_CHAT_default_instance_;
class SC_CHAR_LIST;
struct SC_CHAR_LISTDefaultTypeInternal;
extern SC_CHAR_LISTDefaultTypeInternal _SC_CHAR_LIST_default_instance_;
class SC_ENTER_GAME;
struct SC_ENTER_GAMEDefaultTypeInternal;
extern SC_ENTER_GAMEDefaultTypeInternal _SC_ENTER_GAME_default_instance_;
class SC_LOGIN;
struct SC_LOGINDefaultTypeInternal;
extern SC_LOGINDefaultTypeInternal _SC_LOGIN_default_instance_;
class SC_NORMAL_CHAT;
struct SC_NORMAL_CHATDefaultTypeInternal;
extern SC_NORMAL_CHATDefaultTypeInternal _SC_NORMAL_CHAT_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::CS_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::CS_ENTER_GAME>(Arena*);
template<> ::Protocol::CS_LOGIN* Arena::CreateMaybeMessage<::Protocol::CS_LOGIN>(Arena*);
template<> ::Protocol::CS_NORMAL_CHAT* Arena::CreateMaybeMessage<::Protocol::CS_NORMAL_CHAT>(Arena*);
template<> ::Protocol::SC_CHAR_LIST* Arena::CreateMaybeMessage<::Protocol::SC_CHAR_LIST>(Arena*);
template<> ::Protocol::SC_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::SC_ENTER_GAME>(Arena*);
template<> ::Protocol::SC_LOGIN* Arena::CreateMaybeMessage<::Protocol::SC_LOGIN>(Arena*);
template<> ::Protocol::SC_NORMAL_CHAT* Arena::CreateMaybeMessage<::Protocol::SC_NORMAL_CHAT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class CS_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_LOGIN) */ {
 public:
  inline CS_LOGIN() : CS_LOGIN(nullptr) {}
  ~CS_LOGIN() override;
  explicit constexpr CS_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_LOGIN(const CS_LOGIN& from);
  CS_LOGIN(CS_LOGIN&& from) noexcept
    : CS_LOGIN() {
    *this = ::std::move(from);
  }

  inline CS_LOGIN& operator=(const CS_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOGIN& operator=(CS_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_LOGIN* internal_default_instance() {
    return reinterpret_cast<const CS_LOGIN*>(
               &_CS_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CS_LOGIN& a, CS_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_LOGIN* New() const final {
    return new CS_LOGIN();
  }

  CS_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_LOGIN& from);
  void MergeFrom(const CS_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_LOGIN";
  }
  protected:
  explicit CS_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.CS_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_LOGIN) */ {
 public:
  inline SC_LOGIN() : SC_LOGIN(nullptr) {}
  ~SC_LOGIN() override;
  explicit constexpr SC_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_LOGIN(const SC_LOGIN& from);
  SC_LOGIN(SC_LOGIN&& from) noexcept
    : SC_LOGIN() {
    *this = ::std::move(from);
  }

  inline SC_LOGIN& operator=(const SC_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_LOGIN& operator=(SC_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_LOGIN* internal_default_instance() {
    return reinterpret_cast<const SC_LOGIN*>(
               &_SC_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_LOGIN& a, SC_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_LOGIN* New() const final {
    return new SC_LOGIN();
  }

  SC_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_LOGIN& from);
  void MergeFrom(const SC_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_LOGIN";
  }
  protected:
  explicit SC_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.Packet_ChannelInfo channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::Protocol::Packet_ChannelInfo* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_ChannelInfo >*
      mutable_channels();
  private:
  const ::Protocol::Packet_ChannelInfo& _internal_channels(int index) const;
  ::Protocol::Packet_ChannelInfo* _internal_add_channels();
  public:
  const ::Protocol::Packet_ChannelInfo& channels(int index) const;
  ::Protocol::Packet_ChannelInfo* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_ChannelInfo >&
      channels() const;

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SC_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_ChannelInfo > channels_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CHAR_LIST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_CHAR_LIST) */ {
 public:
  inline SC_CHAR_LIST() : SC_CHAR_LIST(nullptr) {}
  ~SC_CHAR_LIST() override;
  explicit constexpr SC_CHAR_LIST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CHAR_LIST(const SC_CHAR_LIST& from);
  SC_CHAR_LIST(SC_CHAR_LIST&& from) noexcept
    : SC_CHAR_LIST() {
    *this = ::std::move(from);
  }

  inline SC_CHAR_LIST& operator=(const SC_CHAR_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CHAR_LIST& operator=(SC_CHAR_LIST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CHAR_LIST& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CHAR_LIST* internal_default_instance() {
    return reinterpret_cast<const SC_CHAR_LIST*>(
               &_SC_CHAR_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_CHAR_LIST& a, SC_CHAR_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CHAR_LIST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CHAR_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_CHAR_LIST* New() const final {
    return new SC_CHAR_LIST();
  }

  SC_CHAR_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_CHAR_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_CHAR_LIST& from);
  void MergeFrom(const SC_CHAR_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CHAR_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_CHAR_LIST";
  }
  protected:
  explicit SC_CHAR_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .Protocol.Packet_PlayerInfo players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::Packet_PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_PlayerInfo >*
      mutable_players();
  private:
  const ::Protocol::Packet_PlayerInfo& _internal_players(int index) const;
  ::Protocol::Packet_PlayerInfo* _internal_add_players();
  public:
  const ::Protocol::Packet_PlayerInfo& players(int index) const;
  ::Protocol::Packet_PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_PlayerInfo >&
      players() const;

  // @@protoc_insertion_point(class_scope:Protocol.SC_CHAR_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_PlayerInfo > players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_ENTER_GAME) */ {
 public:
  inline CS_ENTER_GAME() : CS_ENTER_GAME(nullptr) {}
  ~CS_ENTER_GAME() override;
  explicit constexpr CS_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_ENTER_GAME(const CS_ENTER_GAME& from);
  CS_ENTER_GAME(CS_ENTER_GAME&& from) noexcept
    : CS_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline CS_ENTER_GAME& operator=(const CS_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ENTER_GAME& operator=(CS_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const CS_ENTER_GAME*>(
               &_CS_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CS_ENTER_GAME& a, CS_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ENTER_GAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_ENTER_GAME* New() const final {
    return new CS_ENTER_GAME();
  }

  CS_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_ENTER_GAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_ENTER_GAME& from);
  void MergeFrom(const CS_ENTER_GAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ENTER_GAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_ENTER_GAME";
  }
  protected:
  explicit CS_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // uint64 playerIndex = 1;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerindex() const;
  void _internal_set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CS_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_ENTER_GAME) */ {
 public:
  inline SC_ENTER_GAME() : SC_ENTER_GAME(nullptr) {}
  ~SC_ENTER_GAME() override;
  explicit constexpr SC_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_ENTER_GAME(const SC_ENTER_GAME& from);
  SC_ENTER_GAME(SC_ENTER_GAME&& from) noexcept
    : SC_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline SC_ENTER_GAME& operator=(const SC_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ENTER_GAME& operator=(SC_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const SC_ENTER_GAME*>(
               &_SC_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SC_ENTER_GAME& a, SC_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ENTER_GAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_ENTER_GAME* New() const final {
    return new SC_ENTER_GAME();
  }

  SC_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_ENTER_GAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_ENTER_GAME& from);
  void MergeFrom(const SC_ENTER_GAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ENTER_GAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_ENTER_GAME";
  }
  protected:
  explicit SC_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SC_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_NORMAL_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_NORMAL_CHAT) */ {
 public:
  inline CS_NORMAL_CHAT() : CS_NORMAL_CHAT(nullptr) {}
  ~CS_NORMAL_CHAT() override;
  explicit constexpr CS_NORMAL_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_NORMAL_CHAT(const CS_NORMAL_CHAT& from);
  CS_NORMAL_CHAT(CS_NORMAL_CHAT&& from) noexcept
    : CS_NORMAL_CHAT() {
    *this = ::std::move(from);
  }

  inline CS_NORMAL_CHAT& operator=(const CS_NORMAL_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_NORMAL_CHAT& operator=(CS_NORMAL_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_NORMAL_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_NORMAL_CHAT* internal_default_instance() {
    return reinterpret_cast<const CS_NORMAL_CHAT*>(
               &_CS_NORMAL_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CS_NORMAL_CHAT& a, CS_NORMAL_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_NORMAL_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_NORMAL_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_NORMAL_CHAT* New() const final {
    return new CS_NORMAL_CHAT();
  }

  CS_NORMAL_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_NORMAL_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_NORMAL_CHAT& from);
  void MergeFrom(const CS_NORMAL_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_NORMAL_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_NORMAL_CHAT";
  }
  protected:
  explicit CS_NORMAL_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bytes msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CS_NORMAL_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_NORMAL_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_NORMAL_CHAT) */ {
 public:
  inline SC_NORMAL_CHAT() : SC_NORMAL_CHAT(nullptr) {}
  ~SC_NORMAL_CHAT() override;
  explicit constexpr SC_NORMAL_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_NORMAL_CHAT(const SC_NORMAL_CHAT& from);
  SC_NORMAL_CHAT(SC_NORMAL_CHAT&& from) noexcept
    : SC_NORMAL_CHAT() {
    *this = ::std::move(from);
  }

  inline SC_NORMAL_CHAT& operator=(const SC_NORMAL_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_NORMAL_CHAT& operator=(SC_NORMAL_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_NORMAL_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_NORMAL_CHAT* internal_default_instance() {
    return reinterpret_cast<const SC_NORMAL_CHAT*>(
               &_SC_NORMAL_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SC_NORMAL_CHAT& a, SC_NORMAL_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_NORMAL_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_NORMAL_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_NORMAL_CHAT* New() const final {
    return new SC_NORMAL_CHAT();
  }

  SC_NORMAL_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_NORMAL_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_NORMAL_CHAT& from);
  void MergeFrom(const SC_NORMAL_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_NORMAL_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_NORMAL_CHAT";
  }
  protected:
  explicit SC_NORMAL_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kMsgFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes playerName = 2;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SC_NORMAL_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CS_LOGIN

// -------------------------------------------------------------------

// SC_LOGIN

// bool success = 1;
inline void SC_LOGIN::clear_success() {
  success_ = false;
}
inline bool SC_LOGIN::_internal_success() const {
  return success_;
}
inline bool SC_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_LOGIN.success)
  return _internal_success();
}
inline void SC_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SC_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_LOGIN.success)
}

// repeated .Protocol.Packet_ChannelInfo channels = 2;
inline int SC_LOGIN::_internal_channels_size() const {
  return channels_.size();
}
inline int SC_LOGIN::channels_size() const {
  return _internal_channels_size();
}
inline ::Protocol::Packet_ChannelInfo* SC_LOGIN::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.SC_LOGIN.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_ChannelInfo >*
SC_LOGIN::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.SC_LOGIN.channels)
  return &channels_;
}
inline const ::Protocol::Packet_ChannelInfo& SC_LOGIN::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::Protocol::Packet_ChannelInfo& SC_LOGIN::channels(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.SC_LOGIN.channels)
  return _internal_channels(index);
}
inline ::Protocol::Packet_ChannelInfo* SC_LOGIN::_internal_add_channels() {
  return channels_.Add();
}
inline ::Protocol::Packet_ChannelInfo* SC_LOGIN::add_channels() {
  // @@protoc_insertion_point(field_add:Protocol.SC_LOGIN.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_ChannelInfo >&
SC_LOGIN::channels() const {
  // @@protoc_insertion_point(field_list:Protocol.SC_LOGIN.channels)
  return channels_;
}

// -------------------------------------------------------------------

// SC_CHAR_LIST

// repeated .Protocol.Packet_PlayerInfo players = 1;
inline int SC_CHAR_LIST::_internal_players_size() const {
  return players_.size();
}
inline int SC_CHAR_LIST::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::Packet_PlayerInfo* SC_CHAR_LIST::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.SC_CHAR_LIST.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_PlayerInfo >*
SC_CHAR_LIST::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.SC_CHAR_LIST.players)
  return &players_;
}
inline const ::Protocol::Packet_PlayerInfo& SC_CHAR_LIST::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::Protocol::Packet_PlayerInfo& SC_CHAR_LIST::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.SC_CHAR_LIST.players)
  return _internal_players(index);
}
inline ::Protocol::Packet_PlayerInfo* SC_CHAR_LIST::_internal_add_players() {
  return players_.Add();
}
inline ::Protocol::Packet_PlayerInfo* SC_CHAR_LIST::add_players() {
  // @@protoc_insertion_point(field_add:Protocol.SC_CHAR_LIST.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Packet_PlayerInfo >&
SC_CHAR_LIST::players() const {
  // @@protoc_insertion_point(field_list:Protocol.SC_CHAR_LIST.players)
  return players_;
}

// -------------------------------------------------------------------

// CS_ENTER_GAME

// uint64 playerIndex = 1;
inline void CS_ENTER_GAME::clear_playerindex() {
  playerindex_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ENTER_GAME::_internal_playerindex() const {
  return playerindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CS_ENTER_GAME::playerindex() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_ENTER_GAME.playerIndex)
  return _internal_playerindex();
}
inline void CS_ENTER_GAME::_internal_set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerindex_ = value;
}
inline void CS_ENTER_GAME::set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_ENTER_GAME.playerIndex)
}

// -------------------------------------------------------------------

// SC_ENTER_GAME

// bool success = 1;
inline void SC_ENTER_GAME::clear_success() {
  success_ = false;
}
inline bool SC_ENTER_GAME::_internal_success() const {
  return success_;
}
inline bool SC_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_ENTER_GAME.success)
  return _internal_success();
}
inline void SC_ENTER_GAME::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SC_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_ENTER_GAME.success)
}

// -------------------------------------------------------------------

// CS_NORMAL_CHAT

// bytes msg = 1;
inline void CS_NORMAL_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CS_NORMAL_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_NORMAL_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_NORMAL_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CS_NORMAL_CHAT.msg)
}
inline std::string* CS_NORMAL_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.CS_NORMAL_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& CS_NORMAL_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void CS_NORMAL_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CS_NORMAL_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CS_NORMAL_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.CS_NORMAL_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CS_NORMAL_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.CS_NORMAL_CHAT.msg)
}

// -------------------------------------------------------------------

// SC_NORMAL_CHAT

// uint64 playerId = 1;
inline void SC_NORMAL_CHAT::clear_playerid() {
  playerid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_NORMAL_CHAT::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_NORMAL_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_NORMAL_CHAT.playerId)
  return _internal_playerid();
}
inline void SC_NORMAL_CHAT::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerid_ = value;
}
inline void SC_NORMAL_CHAT::set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_NORMAL_CHAT.playerId)
}

// bytes playerName = 2;
inline void SC_NORMAL_CHAT::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& SC_NORMAL_CHAT::playername() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_NORMAL_CHAT.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_NORMAL_CHAT::set_playername(ArgT0&& arg0, ArgT... args) {
 
 playername_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SC_NORMAL_CHAT.playerName)
}
inline std::string* SC_NORMAL_CHAT::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:Protocol.SC_NORMAL_CHAT.playerName)
  return _internal_mutable_playername();
}
inline const std::string& SC_NORMAL_CHAT::_internal_playername() const {
  return playername_.Get();
}
inline void SC_NORMAL_CHAT::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SC_NORMAL_CHAT::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SC_NORMAL_CHAT::release_playername() {
  // @@protoc_insertion_point(field_release:Protocol.SC_NORMAL_CHAT.playerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SC_NORMAL_CHAT::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.SC_NORMAL_CHAT.playerName)
}

// bytes msg = 3;
inline void SC_NORMAL_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SC_NORMAL_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_NORMAL_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_NORMAL_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SC_NORMAL_CHAT.msg)
}
inline std::string* SC_NORMAL_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.SC_NORMAL_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& SC_NORMAL_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void SC_NORMAL_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SC_NORMAL_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SC_NORMAL_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.SC_NORMAL_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SC_NORMAL_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.SC_NORMAL_CHAT.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
